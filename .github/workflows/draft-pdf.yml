name: Draft PDF

on:
  workflow_dispatch:  # Manual trigger only for testing
  push:
    paths: 
      - 'paper/paper.md'
      - 'paper/paper.bib'
      - 'paper/figures/**'
      - '.github/workflows/draft-pdf.yml'

jobs:
  paper:
    runs-on: ubuntu-latest
    name: Generate draft PDF
    permissions:
      contents: write  # Allow writing to repository
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Validate paper structure
        run: |
          echo "=== Checking paper structure ==="
          ls -la paper/
          echo ""
          echo "=== Paper.md first 20 lines ==="
          head -20 paper/paper.md
          echo ""
          echo "=== Bibliography check ==="
          head -5 paper/paper.bib
          
      - name: Build draft PDF
        uses: openjournals/openjournals-draft-action@master
        with:
          journal: joss
          paper-path: paper/paper.md
          
      - name: Debug output locations
        if: always()
        run: |
          echo "=== Searching for generated files ==="
          find . -name "*.pdf" -type f 2>/dev/null || echo "No PDF files found"
          find . -name "*.log" -type f 2>/dev/null || echo "No log files found"
          echo ""
          echo "=== Working directory ==="
          pwd
          ls -la
          
      - name: Upload draft PDF
        uses: actions/upload-artifact@v4
        if: hashFiles('paper.pdf') != ''
        with:
          name: draft-pdf
          path: paper.pdf
          
      - name: Upload all artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: all-outputs
          path: |
            ./**/*.pdf
            ./**/*.log
            ./paper.*
          if-no-files-found: ignore
          
      - name: Find and prepare PDF for commit
        id: find_pdf
        run: |
          echo "=== Looking for generated PDF ==="
          
          # Check if PDF already exists in paper directory
          if [ -f "paper/paper.pdf" ]; then
            echo "PDF already exists at paper/paper.pdf"
            ls -lh paper/paper.pdf
            echo "pdf_found=true" >> $GITHUB_OUTPUT
          # Check if paper.pdf exists at root
          elif [ -f "paper.pdf" ]; then
            echo "Found paper.pdf at root, copying to paper/"
            cp paper.pdf paper/paper.pdf
            echo "pdf_found=true" >> $GITHUB_OUTPUT
          else
            # Search for any PDF file (excluding paper directory)
            PDF_PATH=$(find . -name "*.pdf" -type f 2>/dev/null | grep -v "./paper/" | grep -v ".git" | head -1)
            
            if [ -n "$PDF_PATH" ]; then
              echo "Found PDF at: $PDF_PATH"
              cp "$PDF_PATH" paper/paper.pdf
              echo "pdf_found=true" >> $GITHUB_OUTPUT
            else
              echo "No PDF found in filesystem"
              echo "pdf_found=false" >> $GITHUB_OUTPUT
            fi
          fi
          
          # Final verification
          if [ -f "paper/paper.pdf" ]; then
            echo "PDF ready for commit at paper/paper.pdf"
            echo "File size: $(ls -lh paper/paper.pdf | awk '{print $5}')"
          else
            echo "ERROR: No PDF available to commit"
          fi
          
      - name: Commit and push PDF to repository
        if: steps.find_pdf.outputs.pdf_found == 'true'
        run: |
          # Configure Git with bot identity
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Stage the PDF file
          git add paper/paper.pdf
          
          # Create commit if there are changes
          if git diff --staged --quiet; then
            echo "No changes to commit (PDF unchanged)"
          else
            git commit -m "Update paper PDF from GitHub Actions build
            
            Generated from commit: ${{ github.sha }}
            Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            
            # Push to the current branch
            git push origin HEAD:${{ github.ref_name }}
            echo "PDF successfully committed and pushed to repository"
          fi